// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/device/config/config.go
//
// Generated by this command:
//
//	mockgen -source=internal/agent/device/config/config.go -destination=internal/agent/device/config/mock_config.go -package=config
//

// Package config is a generated GoMock package.
package config

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	fsnotify "github.com/fsnotify/fsnotify"
	gomock "go.uber.org/mock/gomock"
)

// MockHookManager is a mock of HookManager interface.
type MockHookManager struct {
	ctrl     *gomock.Controller
	recorder *MockHookManagerMockRecorder
}

// MockHookManagerMockRecorder is the mock recorder for MockHookManager.
type MockHookManagerMockRecorder struct {
	mock *MockHookManager
}

// NewMockHookManager creates a new mock instance.
func NewMockHookManager(ctrl *gomock.Controller) *MockHookManager {
	mock := &MockHookManager{ctrl: ctrl}
	mock.recorder = &MockHookManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookManager) EXPECT() *MockHookManagerMockRecorder {
	return m.recorder
}

// EnsurePostHooks mocks base method.
func (m *MockHookManager) EnsurePostHooks(arg0 []v1alpha1.DeviceConfigHookSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsurePostHooks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsurePostHooks indicates an expected call of EnsurePostHooks.
func (mr *MockHookManagerMockRecorder) EnsurePostHooks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsurePostHooks", reflect.TypeOf((*MockHookManager)(nil).EnsurePostHooks), arg0)
}

// HandleErrors mocks base method.
func (m *MockHookManager) HandleErrors() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleErrors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// HandleErrors indicates an expected call of HandleErrors.
func (mr *MockHookManagerMockRecorder) HandleErrors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleErrors", reflect.TypeOf((*MockHookManager)(nil).HandleErrors))
}

// ResetDefaults mocks base method.
func (m *MockHookManager) ResetDefaults() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDefaults")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetDefaults indicates an expected call of ResetDefaults.
func (mr *MockHookManagerMockRecorder) ResetDefaults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDefaults", reflect.TypeOf((*MockHookManager)(nil).ResetDefaults))
}

// Run mocks base method.
func (m *MockHookManager) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockHookManagerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHookManager)(nil).Run), ctx)
}

// Update mocks base method.
func (m *MockHookManager) Update(hook *v1alpha1.DeviceConfigHookSpec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", hook)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockHookManagerMockRecorder) Update(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHookManager)(nil).Update), hook)
}

// WatchList mocks base method.
func (m *MockHookManager) WatchList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WatchList indicates an expected call of WatchList.
func (mr *MockHookManagerMockRecorder) WatchList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchList", reflect.TypeOf((*MockHookManager)(nil).WatchList))
}

// MockFileMonitor is a mock of FileMonitor interface.
type MockFileMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockFileMonitorMockRecorder
}

// MockFileMonitorMockRecorder is the mock recorder for MockFileMonitor.
type MockFileMonitorMockRecorder struct {
	mock *MockFileMonitor
}

// NewMockFileMonitor creates a new mock instance.
func NewMockFileMonitor(ctrl *gomock.Controller) *MockFileMonitor {
	mock := &MockFileMonitor{ctrl: ctrl}
	mock.recorder = &MockFileMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMonitor) EXPECT() *MockFileMonitorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFileMonitor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMonitorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileMonitor)(nil).Close))
}

// Errors mocks base method.
func (m *MockFileMonitor) Errors() chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(chan error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockFileMonitorMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockFileMonitor)(nil).Errors))
}

// Events mocks base method.
func (m *MockFileMonitor) Events() chan fsnotify.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].(chan fsnotify.Event)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockFileMonitorMockRecorder) Events() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockFileMonitor)(nil).Events))
}

// WatchAdd mocks base method.
func (m *MockFileMonitor) WatchAdd(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAdd", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchAdd indicates an expected call of WatchAdd.
func (mr *MockFileMonitorMockRecorder) WatchAdd(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAdd", reflect.TypeOf((*MockFileMonitor)(nil).WatchAdd), name)
}

// WatchList mocks base method.
func (m *MockFileMonitor) WatchList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// WatchList indicates an expected call of WatchList.
func (mr *MockFileMonitorMockRecorder) WatchList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchList", reflect.TypeOf((*MockFileMonitor)(nil).WatchList))
}

// WatchRemove mocks base method.
func (m *MockFileMonitor) WatchRemove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchRemove indicates an expected call of WatchRemove.
func (mr *MockFileMonitorMockRecorder) WatchRemove(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemove", reflect.TypeOf((*MockFileMonitor)(nil).WatchRemove), name)
}
