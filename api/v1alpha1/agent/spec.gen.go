// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
