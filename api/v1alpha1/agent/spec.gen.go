// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
