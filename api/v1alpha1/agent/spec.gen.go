// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x8/2/cNrL4v0KoBXLXz3rX6afvcDXw8ODYSWO0qQ1/uQe8Ou/AlWZ3eZFIhaTW2Qb7",
	"vz9wSEqURO1qHbuHov0l8YrkzHA43znS5yQVRSk4cK2Sk8+JSldQUPzztCxzllLNBL/RVFf4sJSiBKkZ",
	"4C9OCzD/Z6BSyUozNTlJ3lYF5UQCzeg8B2ImEbEgegWENjCnySTRmxKSk0Rpyfgy2U4Ss2jTh3i7AsKr",
	"Yg7SAEoF15RxkIo8rFi6IlQCotsQxkeiUZpKu+M2pp9rLH4OEXMFcg0ZWQi5AzrjGpYgDXhVs+trCYvk",
	"JPlq1nB55lg86/H31gDaInkfKyYhS05+sSz2jAkor7G8rykQ839Bqg0BcdAnnxPgVWGgXkkoKXJjktwY",
	"gPbP64pz+9drKYVMJskd/8DFA08myZkoyhw0ZAFGx9FJ8unIQD5aU2noVQZFj4YQZ28wIKI31lDVG/Jk",
	"9gYauntDwUbarFI3VVFQuRmSdsYXYq+0m0myQHgkA01ZzvgSxSanShO1URqKUISIlpQrNiirBwtTextR",
	"oRonOhFAgQi9BZrrlZHJc1hKmkEWEZuDRaWNs8ExOCVAPjgnIiXtCTW520lydnV3DUpUMoV3gjMt5E0J",
	"qdk5zfPLRXLyy+6TiC3eImDBM2aFpitD9ZC3bcrJjkKjIzgQqkpItbejaSUlcE3MQTrjyhQ5vbogHr2R",
	"pbb4Gvm7rWXtlsVM962XU80KsJhq0ho5NbZQigLpsqJEtCCUC70CaRBbFUhOkoxqODKwYpJdgFJ0ud+B",
	"uHmE8QxPjy9r7tC5qLSjeLcaeSv+A3CQNH4MZvfTAjTNqKbTZT2T6BXVHW48UEUUaDKnCjJSlRZtvXHG",
	"9d++izoHCVTFkP9lLhks/krseO1saowv1Kh9jjMXtcA5W7f1kEYui1oVhFBTMIkJXL395vRjRqhLXmB2",
	"bmVlwLyhuYKDDU0HroPVeepBdx63bESLDwF1p2UpxdpaozQFpdg8h+4Pr6JXVCqcerPhKf5xuQaZ07Jk",
	"fHkDOaRaSMPIf9CcmeG7MqPOSRqz4h+/q3LNyhwuH0xMVM8fx5LXXIo8L4Dra/hYgdLBFq6hFMoYsU2U",
	"fkP24EBvk+FgveE3OYAe2DWO+T2ew5qlEDDAPgjZYJ/0mHELRZlTDf8AqZjgjjf2EBds+VaID6dpbQ+Y",
	"UcmCcaqFNA8KS5f58/UnSCttLNIO9WhBbFagFzAHbbx/Nna9m25dSG3ONz9j1G0P11g2DiPc0m7Yh63t",
	"7Gs7oMIDa/qBFZVLFbfGVC4rI5voYEqq8H9jFqEBN0mYhgIB9Kyhe0ClpBvzOxVFQXkWR1ZSvSJCthKW",
	"Bg9ZsBwMelnxKbk1/jalnMytm/RrKJkzTuWG5CKlGjKTkXx9dXr7dmIgU7Ko8twichux06Om/EHID+dM",
	"xonNmERNwZzHpkEdeh9YnhvyZMWtu2YLwjRhiuSw0ASKUm/MA5xXTzJAKmVyq5UoAjQRCjvm3/N2Ys+z",
	"of8w8Tgs2uqJtZfnniYPaE9bEqElpY/TiR5jAqB9VsQskWdBmzYTRolK98XhvHJhCl1okIEw0NSGKk4Q",
	"NEjkB2RT8gYDlROfVS9EnosHyMh8Q16oFxh9KDCxh5qQF4V9UDBeaTAPVvbBSlTS/Mzsz4xu1JS8q5Q2",
	"2ChB58HWJnDD6AdDUqo1SEP1//7y8uj79/f32Te/qGKVvf86pgJasuUS5CUa51rNd53LG5bDZelDvIgJ",
	"8HHObmF2sUyDf4wQhzb13yXBFWf6UNl1dN+ZpV1GILyRYhuAGVkqul2160M2Pc6IwUpEaNhM+sMWDDIi",
	"/OmqWrJLkCbyNoKNhlmtRJVn3jbDJ5rqFhoEb+z5hKgqXRGqzKSizGFqsgSWwpRcLBrDzhThQpNSlFWO",
	"Vr0e8RTQSgtiTkysQfr8yMxCr2EMfjwrqfcS543bdVozJti88Yh230TwDo/MBqehZ/QB6mvufOY5U+4v",
	"LL3g/6K0cZp7cA25oBhZUSgEdz/HhZVOFmp07neA1emKR+5/Ig3uV0NK/cBR5MG1CIso++/MhbpiXyAV",
	"MbNjA92IH8DnREIpQWHQREm52iiW0pxkONivCtCSuci4D/D06sKNkQwWjIPCva3tM8iINSh1/aHGbN2R",
	"CYc4sXRPyY1Jv2Wtm6nga5CaSEjFkrNfa2h1iGc0TWl0HpLTnKxpXsGEUJ6Rgm6IBAOXVDyAgFOMDxLS",
	"VuJOyErrUp3MZkumpx/+rqZMGItYGAXZzFLBtWTzymQcswzWkM8UWx5Rma6YhlRXEma0ZEdILMcTmRbZ",
	"V9KlMiqm0h9YLL78kfHMyA0ldqYlteGYLxJev765JR6+5aplYHCsDS8NHxhfgLQza+kDnpWCcVezyBmW",
	"iqp5wbQ5JEzzDJun5IxyY9jmQCqTWhkDesHJGS0gP6MKnp2ThnvqyLBMxStEthazz6FdIovegaZYAnH+",
	"d9eKJn0cXzRxa1zFpKO6gR45GQjIH9biVklyoO7sOUAzW3Sg+VVr/KBLBoO6LZrvaGlUNVKZtmwBFRiu",
	"hn5lC6iPLkz3OIjbbOAO86yJO+KBsg171eiQsVcIiDiSFssiiaYPb/pJHNXp6orq1Y6cUwtS2GoxxtHp",
	"ivIlKOOVUiTNx/cmllAuxMGFJgF1ii4IML0Ck2PWQQPGHibt5MTonHyMLwpJntSsDfe176BubNnHHVWv",
	"8L1gS2KOvrZ6hrR9sa/ly+1BFZAfmLborqRYswzkqNrHj9UcJAcN6gZSCfqgxRc8ZxwegfWt1mVs2V5e",
	"7+CylyIsbvfigFIobVQgEoiekpwpvHpYmQkoaxgjgcs4XZ06wGE8nVF8G5GDgntuEBxZAIBRIUkrpUVB",
	"5rCia4ZimtlU0QF5YHpF8E7BGSd1zzEvxQhdDSL3+kON6zJBfQHcuLZ7HkbE+y19x85ErIIV2F0cSyMC",
	"rqaPoSNQox4l231iMeBZJPDMpCuDEaAP/1zelPkI0y5zu9tvS7p4doqxErEa4fL66uy1C2uihlaBMrAv",
	"zvcn9y1Y4cphui5QLpkevBwe6Q6j0Jxf7F/T7nWFA4C+/OraXqzV19bM43ma66ddxB96Yb0XVtj2QJW9",
	"jHhDWY5/NH0Cd1xVZSnk+A6HKOYaRXS0xhsdbYgZGA4orHd+eROPglgRvVsVSkswdpEufelFkrvrn/Yr",
	"sQU4fASXN4ONE3FSOsbl8sZS9eWU1FdNA/SkZTVOQtuAfLiRMfXhS9YXUIixliIGoVt3L6ukBuqoG8ub",
	"4aaO/6bSNd2cSaZZSvNHt3fEEIfdI/3RBnlsNCAoNuyJjI2Fl7hBCtiXEHRsB7ln55ib5rQ+1MLFzBpk",
	"Jz0Jy+L06Nf35p/jo++P/jl9/028ML7X/4uRVtjZD9sV58oa/YDG4HFdcbY04ROWVug1PrLpdMlEgyt/",
	"WTqejQX99BPwpUm2vv2Pv026bD09+p/jo+9P7u+P/jm9v7+//+aRzO1dfKGwDOtcY4diBTs7Gpbt4o7Y",
	"ddrgJaOr5hG3tqDomFnur30qmje9QXRH8a9JzsdJS6ReYYXelibUjt6mYItIpu3IccVsJDPa2RRSPzad",
	"d31W0QvggxW73mUdBD0qvDlQJ+s1La081GEcUKhxwtgu0XgtvHDx4wgAzfztJHFVxXFL7+zkBrdbfYoB",
	"/5iesr5ierFsbWTSFvyQx+Ep19KCB9dspmFpSOIO9X/+tlKXmPlmvKeL0b+ol3QIRBBwXGKFJN5Eeg1z",
	"IVy7z5V4MAnk5WLxyPCjRUWAtTcWEBIZbQcXraGQ3MhwaweR8Uho0lK9qOuoZ7i7BcCiA8vUrKpYhqWa",
	"irOPFeQbwjLgmi02QSYf8QhBwT5esTwNZhiLjvkImXfB9qTOMMcm522Yr4TQ5OL8EFDufowv7f7jdF76",
	"ScTOGo+gW9kPWVLvo0/FsAa0DduTJ+dO+a0pekrlb9H9OOXvgwiU/668FedUG65eVvpy4f4Ouvweo+kt",
	"lAGKyGiINbq4027YHg0VlqkPT981PunKxI2r7LvrACF9GI490Ux9IJVyGXSnujt4AdFcgseuItowd+tJ",
	"Gb8MMOzpNZn2aelNad9ju1tLJIpihyrNsRCNy3aGuH/eb/95v/2Hu9/uqdNhV9395Y+49XaUxpzDQNc5",
	"zSO3ub4fvSdzfsS/GAKKPKwA74uMXHiTsaKKzAE48fMDUzYXIgeKmaIfPdXDmE6x98cAx/djqA7ahjy6",
	"B6pamMa9C+NXvNoMY3+18dg7r1SaURn19jmdQ652NQ/0lrRxWwCt6NI90gKv+DbenPXCqYFqSX2eo+Qi",
	"fqEZnWaJDCba6kFv7gtFNJVLcDWGvstIVaRhLFXSIrh6/e4IeCoyyMjVj2c3X708JqlZjH4ZiGJLbqyd",
	"k4fosWSdstD4rpMnONLT7kH6l5vcxartZgvOlikfYj6sgBNjZKFmqrvq9a+M7KmUKTny2AcqZgMTDyue",
	"9YBEC2O1OTrITtZ2bDtJAqmIyFMgMj25MjIEWShWUTHaWXbrvyEI8Z1/aVFtuOgSPWpMoPs13aF3AXG+",
	"fwVwbwxav1S2nSTtTvBo8GuAGd7UDZdWGYwJr9/6dr21C5bjIfjc5UyCzRuuoRDrOm2xmUQObsg10Zxh",
	"R8IVyILhVbMamdC0tlBjbD2t0bee1rS0ntaEdSA4KtvY+iRvJwm+PcnSTrPJQc06sYuW23hP/mBbVbQA",
	"f2tb9nFJTPLi/T+jM7T+1k1+1mlSYPraQPg8kH5FPkTg37Db3xvfzA0CaEEqBYQq1z3PU2JHsNelf7GB",
	"fu8a1kzFG9l6fRs1eb3Fk6GEr9tsYXkSTwwH+pye9FBMXB89FaPSezrzHOuxke5hBRLcSahScIWGW2kh",
	"7WtefqJrpGy1zEzj5/EbH7+qFgv2qY/qisr6zfK765+sEUxF0eqxmlOFo1NyobHxkPE0rzIgHyvA6oGk",
	"BWjMgO0rFSf3fGaYONNi5hO2/8LJ/4mTYzTukr/6uPaKnD/xuMwNNuU9qdQxW2IeDNO0rGDfPhyM+DZ2",
	"NiY+6VYUwo+qUCEqrq+GrNtgUyw6uJKmI2y7803NikmAdK8kNKTHmfgOuyae53sPQdLe07hmzNgQnzFb",
	"xaN5TkqTVCsNWdM0SIoKk9k1TFzW6RRQ4Qq7K+VePMG5KQYMkeCWc6GbS99HphHNZPsdhE2YQ0Q7xpEe",
	"9yUApWlRjr3WM6hzeOTS5Y4PPphU6GMFPK0/L9QqWAWt1MHHIGrDroyUuSSSXNXvhnlOoBuYkmug2ZHg",
	"+Wbk9yG+OL/z/fy2DvcBNgprirZ26Gy7fXG5UpAZHyLkknL2K+A8k20shTQ//6JSUdqnCl/M/6sXs+j5",
	"xl/xC32Ymxu70nngIGMHFNQKqSbigStfi7XPJ8b13mPtaWZQ3SfEMnnow0+4argkzIko6ccKPP8Qrbs6",
	"Y65AjJmBfKGC2m3TytaUhKPurce1a9cbG2vjjr8H0o8TOg253U7vHhv+bPY+uNl7/9F9SSfZoBDYLN+3",
	"RI/aBk5+dCfab9Rp1us7H1TV32832hP1lU1Gtc/7LZzmIPV1FWuh77zD1NX7VVVQflRfOHcKqVhqNrDj",
	"Bc1qyMWeB1aiLpyLdfs7BWuQdAn2opGwoPgyh4WQDjHjy2f8bkH72wT399n/2/FZghJkClxHC1aYO9bj",
	"hnV2W7bMar8noKLstHuy7zKsYUyjWevQb9yi+EW9hxicVWsf7Shir4S1kAVX+tG2YWxhGVfxGkTSAB6c",
	"EmAcnGNJCXbjVX7Px3/Oru4GS6PxD8bZpoBBizjQMOBTkqF1wwlL/wNBzige9pbcwG72vbC2i649vmGA",
	"E9vIKQ287+lN3i5XgZOIrPANykueb+xX9fBpaYIOJyQYzVijcrD7aGxvxIGEpxF9f4kWZc748sLElO7q",
	"YcCUzkE/APDa6+FSs6/fxVdduiX7gC+T8CwjLInk+9iXa/uncpYCV9B8bSQ5LWm6AvLt9DiZJJXMk5PE",
	"3/I/PDxMKQ5PhVzO3Fo1++ni7PXPN6+Pvp0eT1e6wIsczTR+9OuyBE7cVxbeUU6XGGziZxePCF2av6F5",
	"rWztg5uk4ra9JHPNa5yWLDlJ/v/0ePrS1VFRxma0ZLP1y5mtGarZZ7ON7cy7f6wwQ+R6egn2kgs/LqV6",
	"PULtT4NY4OFXJi6y5CT5AXQknDXE+boemo7O13KD3K6Gy8wI1oZ9Sth8xNYfu61+Wf2J1oAGP0yJPVek",
	"GxE5rFhdbNDi3Ove1GG07zHsxNouHsi3x8cuhtdgXzsMGodn/3LfcWzgjQ/xrYnb9pL3yx+NjHx7/F3k",
	"08SCeEK2k+S745dPRpq9k4tQc8dppVdYDMgs0u+eH+nPQr8RFXcIv39+hP6zwHyRMxeGa7rEcMQJ9Xvz",
	"bEA7m4aaMvZxLgllTtPwArqtjudxdby2y1qX/3uUMSy0nD+lMr63k0HpV8J+nftJzsPRuG07BEPM9hnV",
	"MMQaU73vnhDXoMS9ohnxnZB/EF3eo1RNQ4nv3/MfJYiplO20CppQsK9jQJXsvXm/BfV5pLqPZ5SAv3xu",
	"AjrdIciTzPqav/+2uE9z+63+a9eP/wfTun+vQ+vp2T41dG5uMPY0Z9lxaY0URNwazWKauNOx2Yt1vgRZ",
	"Ssb1YDPTU7q7Z/I+oxTEO6I/lFOICiaWwrAVHMXCZnCzZPt++38BAAD//2eGkEK4ZAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
