// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+w1VqoPV8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
