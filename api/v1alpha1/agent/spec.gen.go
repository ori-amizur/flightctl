// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
