// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
