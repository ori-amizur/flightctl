// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
