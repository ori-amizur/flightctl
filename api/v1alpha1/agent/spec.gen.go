// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MRWGZdvIFjaCmyWPD4//FwAA//+rGpwAD2gAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
