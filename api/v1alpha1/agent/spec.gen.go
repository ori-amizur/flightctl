// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
