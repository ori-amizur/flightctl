// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
