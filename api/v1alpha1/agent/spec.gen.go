// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
