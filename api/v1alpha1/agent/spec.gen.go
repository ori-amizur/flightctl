// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
