// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
