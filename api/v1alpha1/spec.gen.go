// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
