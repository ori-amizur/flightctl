// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
