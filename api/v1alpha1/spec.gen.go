// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7KoU2WRnsj25+nT1/wEAAP//riv7L6wrAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
