// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
