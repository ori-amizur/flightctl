// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//3bB8PZDNAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
