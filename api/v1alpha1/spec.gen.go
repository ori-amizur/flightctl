// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
