// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8Ldsiyf5jvJr1OprV9su2+aaWTblooJU2sKQLBMixhKVOadWL9HP3uLEFeyKGX0mXQ8TdOPFy/UsrtTH",
	"t1tyO6P6uDCvlpg3LMJO5BRHK0KhdarL1aY2gcKBlRXn+v21nMP5xMJjA6SJKDMHzLv4JqZZh0RX2XeZ",
	"b7CPTjSYKEowN5F2LoTBLlYdDDTPFZbBBFezNXBOYkBEbimsHdxOF5NYIA8d6QyOPXQ+Oc2jCIQ4nyi1",
	"xFvpnWt6yizawTTescD3OuRntuzCK98nKnxPbzh1fEs+VkfWWWu+aD/HcRDgAsZJy4oqwLZ18kFu6+Ol",
	"BH700NdqVNY6VF1TfugncgUwxtv40cU0upiw2K0dnWFepvrHt+toqo0eDr8JdKrG4NQ6jHE4D+6uCu1I",
	"L7OtLgdGr9VX6rUKMaVmTYpwqc4zV6YJXa6YgELiu/O50AEDbPvjHGb8PuAVvLJfQppfxWu6hZ9dx71S",
	"rNhyqVuIxbnN9+Ru8YmyUPr9lX52zjwPlJAIqHFImNynyX6GoxWgl7PnE2vXTtzJury8nGHdPGN8uWu/",
	"FbtvDw9evz99vfNy9ny2kqmuUiyJTNRwRxlQ+8gwelfWHts/PpxMJ2snVCY5NcIjtk8xUZyRyd7k+9nz",
	"2QvrjNM4VYd0d/1i1xY8M5uja9M2tsn8XknY9B48Lt9aYvQw1o9fqe5lq0vu1XO8fP7cJbyDSTf2Hnvb",
	"/Y81Ts3mbnU2OB2gkfZ29Kta/Q/PX9zaXKYscmCqDxTncqVz5GJjkeGltmsMYrVRsQwxD600tOFQ8bmy",
	"raziog98IEvN+HHKci9KqpsKMM4tnSfSkxvGU+Wn9tvTp0dQA+isUVP6QdY7PXO57M9s3rF1A2Qc1rpO",
	"QjWpWz/bN9mbaIBc/baytIHSy4o9aJzHUJqmyfq2N/qSk0iWudj6jsqm4Ls8WJOFSbitqD5Dr2CBNUIk",
	"Q7AGvilqW4QATSo1NgZCuyCJ3Y8grK7eoE0UraDZfGrTSnOBLmAzFHTz5Rs9UAXy/hk0IaGX4k8kzdNK",
	"sr2hsAL3fgmAMr3/rCzCoHPVTW55O0VVPkdkUSVn+ESENIPWqivo6NEV6MxWm7cLMcLCOyE6TsSrXKAx",
	"10oCJNWZOiUCfaf49y+DTvFbJV2dFDt0+00mbRfFfrxD/mwYmLalOnj087vn0T/hGHlPkzyAXFCTfn/3",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
