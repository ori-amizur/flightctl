// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///H12sBmTABAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
