// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
